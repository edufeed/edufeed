// Generated by LiveScript 1.3.1
(function(){
  var getUrlParameters, getParam, getBoolParam, setParam, parseInlineCSS, applyStyleTo, setPropDict, tagMatchesItem, out$ = typeof exports != 'undefined' && exports || this;
  out$.getUrlParameters = getUrlParameters = function(){
    var url, hash, map, parts;
    url = window.location.href;
    hash = url.lastIndexOf('#');
    if (hash !== -1) {
      url = url.slice(0, hash);
    }
    map = {};
    parts = url.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value){
      return map[key] = decodeURIComponent(value).split('+').join(' ');
    });
    return map;
  };
  out$.getParam = getParam = function(key){
    var val;
    val = getUrlParameters()[key];
    if (val != null) {
      return val;
    }
    val = localStorage.getItem(key);
    if (val != null) {
      return val;
    }
  };
  out$.getBoolParam = getBoolParam = function(key){
    var val;
    val = getParam(key);
    if (val != null && (val === true || (val[0] != null && ['t', 'T', 'y', 'Y'].indexOf(val[0]) !== -1))) {
      return true;
    }
    return false;
  };
  out$.setParam = setParam = function(key, val){
    var new_params;
    localStorage.setItem(key, val);
    new_params = getUrlParameters();
    new_params[key] = val;
    return window.history.pushState(null, null, window.location.pathname + '?' + $.param(new_params));
  };
  out$.parseInlineCSS = parseInlineCSS = function(text){
    var output, i$, ref$, len$, line, ref1$, key, value;
    output = {};
    for (i$ = 0, len$ = (ref$ = text.split(';')).length; i$ < len$; ++i$) {
      line = ref$[i$];
      if (line == null) {
        continue;
      }
      line = line.trim();
      if (line.length === 0) {
        continue;
      }
      ref1$ = line.split(':'), key = ref1$[0], value = ref1$[1];
      if (key == null || value == null) {
        continue;
      }
      key = key.trim();
      value = value.trim();
      if (key.length === 0 || value.length === 0) {
        continue;
      }
      output[key] = value;
    }
    return output;
  };
  out$.applyStyleTo = applyStyleTo = function(tag, style){
    var k, ref$, v, results$ = [];
    for (k in ref$ = parseInlineCSS(style)) {
      v = ref$[k];
      results$.push(tag.style[k] = v);
    }
    return results$;
  };
  out$.setPropDict = setPropDict = function(tag, data){
    var k, v, results$ = [];
    if (data != null) {
      if (tag.prop != null && typeof tag.prop === 'function') {
        for (k in data) {
          v = data[k];
          results$.push(tag.prop(k, v));
        }
        return results$;
      } else {
        for (k in data) {
          v = data[k];
          results$.push(tag[k] = v);
        }
        return results$;
      }
    }
  };
  out$.tagMatchesItem = tagMatchesItem = function(tag, item){
    var itemtype, data, tag_type, k, v;
    itemtype = item.itemtype, data = item.data;
    tag_type = tag.tagName.toLowerCase().split('-thumbnail').join('').split('-activity').join('');
    if (itemtype !== tag_type) {
      return false;
    }
    if (data != null) {
      for (k in data) {
        v = data[k];
        if (tag[k] !== v) {
          return false;
        }
      }
    }
    return true;
  };
}).call(this);
