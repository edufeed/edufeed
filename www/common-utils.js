// Generated by LiveScript 1.4.0
(function(){
  var isChromeApp, isMobileChromeApp, getLocalStorage, getUsername, getPassword, getCouchURL, setUsername, setPassword, getUrlParameters, getParam, getBoolParam, setParam, parseInlineCSS, applyStyleTo, setPropDict, tagMatchesItem, out$ = typeof exports != 'undefined' && exports || this;
  out$.isChromeApp = isChromeApp = function(){
    return (typeof chrome != 'undefined' && chrome !== null) && chrome.app != null && chrome.app.runtime != null;
  };
  out$.isMobileChromeApp = isMobileChromeApp = function(){
    return (typeof chrome != 'undefined' && chrome !== null) && chrome.app != null && chrome.app.runtime != null && chrome.mobile != null;
  };
  out$.getLocalStorage = getLocalStorage = function(){
    if (isChromeApp() && !isMobileChromeApp()) {
      return {
        get: function(key, callback){
          return chrome.storage.local.get(key, function(dict){
            return callback(dict[key]);
          });
        },
        set: function(key, val, callback){
          var dict;
          dict = {};
          dict[key] = val;
          if (callback != null) {
            return chrome.storage.local.set(dict, function(){
              return callback(val);
            });
          } else {
            return chrome.storage.local.set(dict);
          }
        }
      };
    }
    if (window.localStorage != null) {
      return {
        get: function(key, callback){
          return callback(window.localStorage.getItem(key));
        },
        set: function(key, val, callback){
          window.localStorage.setItem(key, val);
          if (callback != null) {
            return callback(val);
          }
        }
      };
    }
  };
  out$.getUsername = getUsername = function(callback){
    return getLocalStorage().get('username', function(username){
      return callback(username != null ? username : 'guestuser');
    });
  };
  out$.getPassword = getPassword = function(callback){
    return getLocalStorage().get('password', function(password){
      return callback(password != null ? password : 'guestpassword');
    });
  };
  out$.getCouchURL = getCouchURL = function(callback){
    return callback('edufeed.cloudant.com');
  };
  out$.setUsername = setUsername = function(username, callback){
    return getLocalStorage().set('username', username, callback);
  };
  out$.setPassword = setPassword = function(password, callback){
    return getLocalStorage().set('password', password, callback);
  };
  /*
  localinfo = {}
  export setFileSystem = (filesystem, callback) ->
    localinfo.filesystem = filesystem
  
  export getFileSystem = ->
    return localinfo.filesystem
  
  export getDir = (dirname, callback) ->
    filesystem = getFileSystem()
    filesystem.root.getDirectory(
      dirname,
      {create: true},
      (direntry) ->
        callback direntry
      ,
      (err) ->
        console.log 'error getting directory ' + dirname
        console.log err
    )
  
  export getImageFile = (filename, callback) ->
    getDir 'images', (imgdir) ->
      imgdir.getFile(
        filename,
        {create: true},
        (imgfile) ->
          callback imgfile
        ,
        (err) ->
          console.log 'error getting file ' + filename
          console.log err
      )
  
  export writeImageMimetype = (imgname, mimetype, callback) ->
    getImageFileWriter imgname + '.txt', (filewriter) ->
      filewriter.onwriteend = (e) ->
        if callback?
          callback()
      filewriter.write new Blob([mimetype], {type: 'text/plain'})
  
  export writeImageData = (imgname, base64data, callback) ->
    getImageFileWriter imgname + '.jpg', (filewriter) ->
      filewriter.onwriteend = (e) ->
        if callback?
          callback()
      filewriter.write base64toblob(base64data, {type: ''})
  
  export writeImageToFile = (imgname, base64string, callback) ->
    mimetype = base64string.slice(base64string.indexOf(':') + 1, base64string.indexOf(';'))
    base64data = base64string.slice(base64string.indexOf(',') + 1)
    writeImageMimetype imgname, mimetype, ->
      writeImageData imgname, base64data, ->
        if callback?
          callback()
  
  export getImageFileReader = (filename, callback) ->
    getImageFile filename, (imgfile) ->
      callback new FileReader(imgfile.file)
  
  export getImageFileWriter = (filename, callback) ->
    getImageFile filename, (imgfile) ->
      imgfile.createWriter (filewriter) ->
        callback filewriter
  */
  out$.getUrlParameters = getUrlParameters = function(){
    var url, hash, map, parts;
    url = window.location.href;
    hash = url.lastIndexOf('#');
    if (hash !== -1) {
      url = url.slice(0, hash);
    }
    map = {};
    parts = url.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value){
      return map[key] = decodeURIComponent(value).split('+').join(' ');
    });
    return map;
  };
  out$.getParam = getParam = function(key, callback){
    var value;
    value = getUrlParameters()[key];
    if (value != null) {
      callback(value);
      return;
    }
    return getLocalStorage().get(key, function(val){
      return callback(val);
    });
  };
  out$.getBoolParam = getBoolParam = function(key, callback){
    return getParam(key, function(val){
      if (val != null && (val === true || (val.length != null && val[0] != null && ['t', 'T', 'y', 'Y'].indexOf(val[0]) !== -1))) {
        callback(true);
        return;
      }
      return callback(false);
    });
  };
  out$.setParam = setParam = function(key, val){
    var new_params;
    getLocalStorage().set(key, val);
    new_params = getUrlParameters();
    new_params[key] = val;
    return window.history.pushState(null, null, window.location.pathname + '?' + $.param(new_params));
  };
  out$.parseInlineCSS = parseInlineCSS = function(text){
    var output, i$, ref$, len$, line, ref1$, key, value;
    output = {};
    for (i$ = 0, len$ = (ref$ = text.split(';')).length; i$ < len$; ++i$) {
      line = ref$[i$];
      if (line == null) {
        continue;
      }
      line = line.trim();
      if (line.length === 0) {
        continue;
      }
      ref1$ = line.split(':'), key = ref1$[0], value = ref1$[1];
      if (key == null || value == null) {
        continue;
      }
      key = key.trim();
      value = value.trim();
      if (key.length === 0 || value.length === 0) {
        continue;
      }
      output[key] = value;
    }
    return output;
  };
  out$.applyStyleTo = applyStyleTo = function(tag, style){
    var k, ref$, v, results$ = [];
    for (k in ref$ = parseInlineCSS(style)) {
      v = ref$[k];
      results$.push(tag.style[k] = v);
    }
    return results$;
  };
  out$.setPropDict = setPropDict = function(tag, data){
    var k, v, results$ = [], results1$ = [];
    if (data != null) {
      if (tag.prop != null && typeof tag.prop === 'function') {
        for (k in data) {
          v = data[k];
          results$.push(tag.prop(k, v));
        }
        return results$;
      } else {
        for (k in data) {
          v = data[k];
          results1$.push(tag[k] = v);
        }
        return results1$;
      }
    }
  };
  out$.tagMatchesItem = tagMatchesItem = function(tag, item){
    var itemtype, data, tag_type, k, v;
    itemtype = item.itemtype, data = item.data;
    tag_type = tag.tagName.toLowerCase().split('-thumbnail').join('').split('-activity').join('');
    if (itemtype !== tag_type) {
      return false;
    }
    if (data != null) {
      for (k in data) {
        v = data[k];
        if (tag[k] !== v) {
          return false;
        }
      }
    }
    return true;
  };
}).call(this);
