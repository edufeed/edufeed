// Generated by LiveScript 1.3.1
(function(){
  var yamlfile, item_matches_query, filter_by_query, filter_out_activities, filter_out_duplicate_close, itemtype_and_data_matches_v2, makeLogAnalyzer, getLogAnalysisResults, getLogAnalysisResultsAsString, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice;
  yamlfile = require('yamlfile');
  item_matches_query = function(item, query){
    var k, v;
    if (query == null) {
      return true;
    }
    for (k in query) {
      v = query[k];
      if (item[k] == null || v !== item[k]) {
        return false;
      }
    }
    return true;
  };
  out$.filter_by_query = filter_by_query = function(logs, query){
    var x;
    return (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = logs).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (item_matches_query(x, query)) {
          results$.push(x);
        }
      }
      return results$;
    }());
  };
  filter_out_activities = function(logs, ignored_activities, ignore_before_timestamp){
    var noIgnoredActivities, x;
    noIgnoredActivities = logs.filter(function(x){
      if (ignored_activities.indexOf(x.itemtype) !== -1) {
        return false;
      }
      if (x.item != null && x.item.itemtype != null && ignored_activities.indexOf(x.item.itemtype) !== -1) {
        return false;
      }
      return true;
    });
    return (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = noIgnoredActivities).length; i$ < len$; ++i$) {
        x = ref$[i$];
        if (x.updatetime >= ignore_before_timestamp) {
          results$.push(x);
        }
      }
      return results$;
    }());
  };
  filter_out_duplicate_close = function(logs){
    var expecting_close, last_closed, output, sorted_logs, i$, len$, evt, event;
    expecting_close = false;
    last_closed = null;
    output = [];
    sorted_logs = slice$.call(logs, 0).sort(function(x, y){
      return x.posttime - y.posttime;
    });
    for (i$ = 0, len$ = logs.length; i$ < len$; ++i$) {
      evt = logs[i$];
      event = evt.event;
      if (event === 'task-started') {
        expecting_close = true;
      }
      if (['task-left', 'task-finished'].indexOf(event) !== -1) {
        if (!expecting_close) {
          continue;
        }
        expecting_close = false;
      }
      output.push(evt);
    }
    return output;
  };
  itemtype_and_data_matches_v2 = function(item1, item2){
    if (item1.itemtype !== item2.itemtype) {
      return false;
    }
    if (deepEq$(item1.data, item2.data, '===')) {
      return true;
    }
    return false;
  };
  out$.makeLogAnalyzer = makeLogAnalyzer = function(orig_logs, options){
    var logs, this$ = this;
    if (options == null) {
      options = {};
    }
    if (options.ignored_activities == null) {
      options.ignored_activities = [];
    }
    if (options.ignore_before_timestamp == null) {
      options.ignore_before_timestamp = 0;
    }
    if (options.ignore_duplicate_close == null) {
      options.ignore_duplicate_close = false;
    }
    logs = filter_out_activities(orig_logs, options.ignored_activities, options.ignore_before_timestamp);
    if (options.ignore_duplicate_close) {
      logs = filter_out_duplicate_close(logs);
    }
    this.all_item_types = function(){
      return ['typeword', 'typeletter', 'balance', 'addition', 'subtraction', 'fillblank', 'fillblanksocial'];
    };
    this.all_posters = function(){
      var allusers, allusers_set, all_classes, classname, classinfo, i$, ref$, len$, username;
      allusers = [];
      allusers_set = {};
      all_classes = yamlfile.readFileSync('www/classes.yaml');
      for (classname in all_classes) {
        classinfo = all_classes[classname];
        if (classinfo.users == null) {
          continue;
        }
        for (i$ = 0, len$ = (ref$ = classinfo.users).length; i$ < len$; ++i$) {
          username = ref$[i$];
          if (allusers_set[username] == null) {
            allusers_set[username] = true;
            allusers.push(username);
          }
        }
      }
      return allusers;
    };
    this.addAllItemTypes = function(itemList){
      var allItemTypes, i$, len$, itemtype;
      allItemTypes = all_item_types();
      for (i$ = 0, len$ = allItemTypes.length; i$ < len$; ++i$) {
        itemtype = allItemTypes[i$];
        if (!in$(itemtype, Object.keys(itemList))) {
          itemList[itemtype] = 0;
        }
      }
      return itemList;
    };
    this.addAllPosters = function(posterList, allPosters){
      var i$, len$, poster;
      for (i$ = 0, len$ = allPosters.length; i$ < len$; ++i$) {
        poster = allPosters[i$];
        if (!in$(poster, Object.keys(posterList))) {
          posterList[poster] = 0;
        }
      }
      return posterList;
    };
    this.select_query = function(query){
      return filter_by_query(logs, query);
    };
    this.count_event_type = function(event_type){
      return select_query({
        event: event_type
      }).length;
    };
    this.count_unique_activity_shares = function(){
      var all_share_events, unique_share_events, i$, len$, share_event, matches, res$, j$, len1$, x;
      all_share_events = select_query({
        event: 'shareactivity'
      });
      unique_share_events = [];
      for (i$ = 0, len$ = all_share_events.length; i$ < len$; ++i$) {
        share_event = all_share_events[i$];
        res$ = [];
        for (j$ = 0, len1$ = unique_share_events.length; j$ < len1$; ++j$) {
          x = unique_share_events[j$];
          if (itemtype_and_data_matches_v2(share_event, x)) {
            res$.push(x);
          }
        }
        matches = res$;
        if (matches.length === 0) {
          unique_share_events.push(share_event);
        }
      }
      return unique_share_events.length;
    };
    this.target_users_for_sharing = function(){
      var allPosters, target_users, all_share_events, i$, len$, share_event, share_target;
      allPosters = all_posters();
      target_users = addAllPosters({}, allPosters);
      all_share_events = select_query({
        event: 'shareactivity'
      });
      for (i$ = 0, len$ = all_share_events.length; i$ < len$; ++i$) {
        share_event = all_share_events[i$];
        share_target = share_event.targetuser;
        if (share_target == null) {
          continue;
        }
        if (target_users[share_target] == null) {
          target_users[share_target] = 0;
        }
        target_users[share_target] += 1;
      }
      return target_users;
    };
    this.posters_for_event_type = function(event_type){
      var matching_events, allPosters, posters, i$, len$, evt, item, poster;
      matching_events = select_query({
        event: event_type
      });
      allPosters = all_posters();
      posters = addAllPosters({}, allPosters);
      for (i$ = 0, len$ = matching_events.length; i$ < len$; ++i$) {
        evt = matching_events[i$];
        item = evt.item;
        if (item == null || item.social == null) {
          continue;
        }
        poster = item.social.poster;
        if (poster == null) {
          continue;
        }
        if (posters[poster] == null) {
          posters[poster] = 0;
        }
        posters[poster] += 1;
      }
      return posters;
    };
    this.itemtype_for_event_type = function(event_type){
      var matching_events, item_types, i$, len$, evt, item, itemtype;
      matching_events = select_query({
        event: event_type
      });
      item_types = addAllItemTypes({});
      for (i$ = 0, len$ = matching_events.length; i$ < len$; ++i$) {
        evt = matching_events[i$];
        item = evt.item;
        if (item == null) {
          continue;
        }
        itemtype = item.itemtype;
        if (itemtype == null) {
          continue;
        }
        if (item_types[itemtype] == null) {
          item_types[itemtype] = 0;
        }
        item_types[itemtype] += 1;
      }
      return item_types;
    };
    this.app_open_duration = function(){
      var open_events, output, i$, len$, evt;
      open_events = select_query({
        event: 'app-still-open'
      });
      output = 0;
      for (i$ = 0, len$ = open_events.length; i$ < len$; ++i$) {
        evt = open_events[i$];
        if (evt.postinterval == null) {
          continue;
        }
        output += evt.postinterval / 1000.0;
      }
      return output;
    };
    this.app_active_duration = function(){
      var open_events, output, i$, len$, evt;
      open_events = select_query({
        event: 'app-still-open'
      });
      output = 0;
      for (i$ = 0, len$ = open_events.length; i$ < len$; ++i$) {
        evt = open_events[i$];
        if (evt.postinterval == null) {
          continue;
        }
        if (evt.mostrecentclick == null) {
          continue;
        }
        if (evt.currenttime == null) {
          continue;
        }
        if (Math.abs(evt.currenttime - evt.mostrecentclick) > evt.postinterval) {
          continue;
        }
        output += evt.postinterval / 1000.0;
      }
      return output;
    };
    this.time_spent_on_activity_types = function(){
      var open_events, output, i$, len$, evt;
      open_events = select_query({
        event: 'app-still-open'
      });
      output = addAllItemTypes({});
      for (i$ = 0, len$ = open_events.length; i$ < len$; ++i$) {
        evt = open_events[i$];
        if (evt.postinterval == null) {
          continue;
        }
        if (evt.currentactivitytype == null) {
          continue;
        }
        if (output[evt.currentactivitytype] == null) {
          output[evt.currentactivitytype] = 0.0;
        }
        output[evt.currentactivitytype] += evt.postinterval / 1000.0;
      }
      return output;
    };
    this.active_time_spent_on_activity_types = function(){
      var open_events, output, i$, len$, evt;
      open_events = select_query({
        event: 'app-still-open'
      });
      output = addAllItemTypes({});
      for (i$ = 0, len$ = open_events.length; i$ < len$; ++i$) {
        evt = open_events[i$];
        if (evt.postinterval == null) {
          continue;
        }
        if (evt.currentactivitytype == null) {
          continue;
        }
        if (evt.postinterval == null) {
          continue;
        }
        if (evt.mostrecentclick == null) {
          continue;
        }
        if (evt.currenttime == null) {
          continue;
        }
        if (Math.abs(evt.currenttime - evt.mostrecentclick) > evt.postinterval) {
          continue;
        }
        if (output[evt.currentactivitytype] == null) {
          output[evt.currentactivitytype] = 0.0;
        }
        output[evt.currentactivitytype] += evt.postinterval / 1000.0;
      }
      return output;
    };
    this.countTabletPosts = function(posterList){
      var totalTabletPosts, i$, ref$, len$, key;
      totalTabletPosts = 0;
      for (i$ = 0, len$ = (ref$ = Object.keys(posterList)).length; i$ < len$; ++i$) {
        key = ref$[i$];
        if (key === 'tablet') {
          totalTabletPosts += posterList[key];
        }
      }
      return totalTabletPosts;
    };
    this.countTeacherPosts = function(posterList){
      var totalTeacherPosts, i$, ref$, len$, key;
      totalTeacherPosts = 0;
      for (i$ = 0, len$ = (ref$ = Object.keys(posterList)).length; i$ < len$; ++i$) {
        key = ref$[i$];
        if (key === 'teacherb' || key === 'teacherc') {
          totalTeacherPosts += posterList[key];
        }
      }
      return totalTeacherPosts;
    };
    this.countClassmatePosts = function(posterList){
      var totalClassmatePosts, i$, ref$, len$, key;
      totalClassmatePosts = 0;
      for (i$ = 0, len$ = (ref$ = Object.keys(posterList)).length; i$ < len$; ++i$) {
        key = ref$[i$];
        if (key !== 'tablet' && key !== 'teacherb' && key !== 'teacherc') {
          totalClassmatePosts += posterList[key];
        }
      }
      return totalClassmatePosts;
    };
    this.calculatePercentage = function(numer, denom){
      if (denom === 0) {
        return 0;
      } else {
        return numer / denom;
      }
    };
    this.calculatePercentageInDict = function(activityDict, total){
      var percentage, i$, ref$, len$, key;
      percentage = {};
      for (i$ = 0, len$ = (ref$ = Object.keys(activityDict)).length; i$ < len$; ++i$) {
        key = ref$[i$];
        percentage[key] = calculatePercentage(activityDict[key], total);
      }
      return percentage;
    };
    this.calculatePercentagesOfStarted = function(finishedOrLeft, started){
      var percentage, i$, ref$, len$, key;
      percentage = {};
      for (i$ = 0, len$ = (ref$ = Object.keys(started)).length; i$ < len$; ++i$) {
        key = ref$[i$];
        if (started[key] !== 0 && finishedOrLeft[key] != null) {
          percentage[key] = finishedOrLeft[key] / started[key];
        } else {
          percentage[key] = 0;
        }
      }
      return percentage;
    };
    this.getResults = function(){
      var allPosters, output, numActivitiesStartedBySystem, numActivitiesFinished, numActivitiesLeft, numActivitiesStarted, diff, activeTime, postersOfStartedActivities, classmatePostedStarted, teacherPostedStarted, tabletPostedStarted, postersOfFinishedActivities, classmatePostedFinished, teacherPostedFinished, tabletPostedFinished, postersOfLeftActivities, classmatePostedLeft, teacherPostedLeft, tabletPostedLeft, activityTypesStarted, activityTypesFinished, activityTypesLeft, activityActiveTime;
      allPosters = all_posters();
      output = {};
      numActivitiesStartedBySystem = count_event_type('task-started');
      numActivitiesFinished = count_event_type('task-finished');
      numActivitiesLeft = count_event_type('task-left');
      numActivitiesStarted = numActivitiesFinished + numActivitiesLeft;
      diff = numActivitiesStartedBySystem - numActivitiesStarted;
      activeTime = app_active_duration();
      output['number Activities Started As Reported By System'] = numActivitiesStartedBySystem;
      output['number Activities Started'] = numActivitiesStarted;
      output['number Activities Finished'] = numActivitiesFinished;
      output['number Activities Left'] = numActivitiesLeft;
      output['difference between started and finished or left activities'] = diff;
      output['percent Of Started That Were Finished'] = numActivitiesFinished / numActivitiesStarted;
      output['percent Of Started That Were Left'] = numActivitiesLeft / numActivitiesStarted;
      output['normalized Num Activities Started Over Active Time'] = numActivitiesStarted / activeTime;
      output['normalized Num Activities Left Over Active Time'] = numActivitiesLeft / activeTime;
      output['normalized num Activities Finished Over Active Time'] = numActivitiesFinished / activeTime;
      output['num Total Share Events'] = count_event_type('shareactivity');
      output['number of unique activities shared'] = count_unique_activity_shares();
      output['number of shares to each person in the class'] = target_users_for_sharing();
      postersOfStartedActivities = posters_for_event_type('task-started');
      classmatePostedStarted = countClassmatePosts(postersOfStartedActivities);
      teacherPostedStarted = countTeacherPosts(postersOfStartedActivities);
      tabletPostedStarted = countTabletPosts(postersOfStartedActivities) - diff;
      output['posters For Activities Started'] = postersOfStartedActivities;
      output['classmate Posted Activites Started'] = classmatePostedStarted;
      output['teacher Posted Activities Started'] = teacherPostedStarted;
      output['tab Posted Activities Started'] = tabletPostedStarted;
      output['percent Classmate Posted Activities Started'] = classmatePostedStarted / numActivitiesStarted;
      output['percent Teacher Posted Activities Started'] = teacherPostedStarted / numActivitiesStarted;
      output['percent Tab Posted Activites Started'] = tabletPostedStarted / numActivitiesStarted;
      postersOfFinishedActivities = posters_for_event_type('task-finished');
      classmatePostedFinished = countClassmatePosts(postersOfFinishedActivities);
      teacherPostedFinished = countTeacherPosts(postersOfFinishedActivities);
      tabletPostedFinished = countTabletPosts(postersOfFinishedActivities);
      output['posters For Activities Finished'] = postersOfFinishedActivities;
      output['total Classmate Posted Activities Finished'] = classmatePostedFinished;
      output['total Teacher Posted Activities Finished'] = teacherPostedFinished;
      output['total Tab Posted Activities Finished'] = tabletPostedFinished;
      output['percent Classmate Posted Activities Finished'] = calculatePercentage(classmatePostedFinished, classmatePostedStarted);
      output['percent Teacher Posted Activities Finished'] = calculatePercentage(teacherPostedFinished, teacherPostedStarted);
      output['percent Tab Posted Activities Finished'] = calculatePercentage(tabletPostedFinished, tabletPostedStarted);
      postersOfLeftActivities = posters_for_event_type('task-left');
      classmatePostedLeft = countClassmatePosts(postersOfLeftActivities);
      teacherPostedLeft = countTeacherPosts(postersOfLeftActivities);
      tabletPostedLeft = countTabletPosts(postersOfLeftActivities);
      output['posters For Activities Left'] = postersOfLeftActivities;
      output['total Classmate Posted Activities Left'] = classmatePostedLeft;
      output['total Teacher Posted Activities Left'] = teacherPostedLeft;
      output['total Tab Posted Activities Left'] = tabletPostedLeft;
      output['percent Classmate Posted Activities Left'] = calculatePercentage(classmatePostedLeft, classmatePostedStarted);
      output['percent Teacher Posted Activities Left'] = calculatePercentage(teacherPostedLeft, teacherPostedStarted);
      output['percent Tab Posted Activities Left'] = calculatePercentage(tabletPostedLeft, tabletPostedStarted);
      activityTypesStarted = itemtype_for_event_type('task-started');
      output['total Num Of Each Activity Type Started'] = activityTypesStarted;
      output['percent Of Each Activity Type Started Over All Started'] = calculatePercentageInDict(activityTypesStarted, numActivitiesStarted);
      activityTypesFinished = itemtype_for_event_type('task-finished');
      output['total Num Of Each Activity Type Finished'] = activityTypesFinished;
      output['percent Of Started Activity Type Finished'] = calculatePercentagesOfStarted(activityTypesFinished, activityTypesStarted);
      activityTypesLeft = itemtype_for_event_type('task-left');
      output['total Num Of Each Activity Type Left'] = activityTypesLeft;
      output['percent Of Started Activity Type Left'] = calculatePercentagesOfStarted(activityTypesLeft, activityTypesStarted);
      output['total Open Time'] = app_open_duration();
      output['total Active Time'] = activeTime;
      output['total Activity Open Time'] = addAllItemTypes(time_spent_on_activity_types());
      activityActiveTime = addAllItemTypes(active_time_spent_on_activity_types());
      output['total Activity Active Time'] = activityActiveTime;
      output['percent Active Time per Activity'] = calculatePercentageInDict(activityActiveTime, activeTime);
      return output;
    };
    return this;
  };
  out$.getLogAnalysisResults = getLogAnalysisResults = function(logs){
    var analyzer;
    analyzer = makeLogAnalyzer(logs, {
      ignored_activities: ['typeletter', 'bars', 'dots', 'readaloud', 'lettervideo', 'numbervideo', 'admin'],
      ignore_before_timestamp: 1444029300000,
      ignore_duplicate_close: true
    });
    return analyzer.getResults();
  };
  out$.getLogAnalysisResultsAsString = getLogAnalysisResultsAsString = function(logs){
    return JSON.stringify(getLogAnalysisResults(logs), null, 2);
  };
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) {
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
