// Generated by LiveScript 1.4.0
(function(){
  Polymer({
    is: 'taskfinished-display',
    properties: {},
    S: function(pattern){
      return $(this.$$(pattern));
    },
    closeTaskFinishedDisplay: function(){
      var classmates, i$, len$, classmate, name;
      console.log('close task finished display!');
      classmates = this.S('#classmate_avatars').children();
      for (i$ = 0, len$ = classmates.length; i$ < len$; ++i$) {
        classmate = classmates[i$];
        if (classmate.checked) {
          name = classmate.attributes['username'].value;
          this.fire('share-activity', {
            username: name
          });
          console.log('shared with: ' + name);
        }
      }
      return this.fire('close-taskfinished', this);
    },
    numClassmatesChecked: function(){
      var totalChecked, classmates, i$, len$, classmate;
      totalChecked = 0;
      classmates = this.S('#classmate_avatars').children();
      for (i$ = 0, len$ = classmates.length; i$ < len$; ++i$) {
        classmate = classmates[i$];
        if (classmate.checked) {
          totalChecked += 1;
        }
      }
      return totalChecked;
    },
    switchCheckmark: function(avatar){
      var self, classmates, i$, len$, classmate;
      self = this;
      classmates = self.S('#classmate_avatars').children();
      for (i$ = 0, len$ = classmates.length; i$ < len$; ++i$) {
        classmate = classmates[i$];
        if (classmate.checked) {
          classmate.checked = false;
        }
      }
      return avatar.prop('checked', true);
    },
    ready: function(){
      var self;
      self = this;
      return getBoolParam('skipsharescreen', function(skipsharescreen){
        if (skipsharescreen) {
          self.style.opacity = 0.0;
          setTimeout(function(){
            return self.fire('close-taskfinished', this);
          }, 0);
          return;
        } else {
          self.style.opacity = 1.0;
        }
        setTimeout(function(){
          return synthesize_word('share this with one friend');
        }, 1000);
        return getUsername(function(username){
          return getClassmates(username, function(all_classmates){
            var res$, i$, len$, x, classmates, classmatesPicked, maxShareTo, i;
            res$ = [];
            for (i$ = 0, len$ = all_classmates.length; i$ < len$; ++i$) {
              x = all_classmates[i$];
              if (x !== username) {
                res$.push(x);
              }
            }
            all_classmates = res$;
            classmates = [];
            classmatesPicked = 0;
            maxShareTo = 5;
            if (all_classmates.length <= maxShareTo) {
              maxShareTo = all_classmates.length;
            }
            while (classmatesPicked < maxShareTo) {
              i = Math.floor(Math.random() * all_classmates.length);
              if (!in$(all_classmates[i], classmates)) {
                classmates.push(all_classmates[i]);
                classmatesPicked += 1;
              }
            }
            return getUsersBFF(username, function(bestFriend){
              var i, maxSharedWith, i$, ref$, len$, results$ = [];
              if (bestFriend != null) {
                i = Math.floor(Math.random() * classmates.length);
                classmates[i] = bestFriend;
              }
              maxSharedWith = 1;
              for (i$ = 0, len$ = (ref$ = classmates).length; i$ < len$; ++i$) {
                results$.push((fn$.call(this, ref$[i$])));
              }
              return results$;
              function fn$(classmate){
                var avatar, big_avatar;
                avatar = $("<user-avatar username='" + classmate + "' size='m'>").css({
                  'cursor': 'pointer',
                  'display': 'inline-block'
                });
                big_avatar = $("<user-avatar username='" + classmate + "' size='l'>").css({
                  'display': 'none'
                });
                avatar.click(function(){
                  if (!avatar.prop('checked')) {
                    self.switchCheckmark(avatar);
                    self.S('#classmate_avatars').css({
                      'display': 'none'
                    });
                    big_avatar.css({
                      'display': 'inline'
                    });
                    return self.S('#finishedbutton').css({
                      'display': 'none'
                    });
                  } else {
                    avatar.prop('checked', false);
                    return big_avatar.css({
                      'display': 'none'
                    });
                  }
                });
                big_avatar.click(function(){
                  return self.closeTaskFinishedDisplay();
                });
                avatar.appendTo(self.S('#classmate_avatars'));
                return big_avatar.appendTo(self.S('#sharedwith'));
              }
            });
          });
        });
      });
    }
  });
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
