// Generated by LiveScript 1.3.1
(function(){
  var getFeedWordList, getFeedReadingList, getFillBlankSentencesWithCategories, getWordCategories, getFeedVideoLists, getPosterLists, all_feed_items_cache, getAllFeedItems, feed_items_cache, chooseRandomPoster, barsTasks, dotsTasks, typeletterTasks, typewordTasks, balanceTasks, additionTasks, subtractionTasks, lettervideoTasks, numbervideoTasks, readaloudTasks, fillblankTasks, fillblanksocialTasks, getSampleFeedItems, out$ = typeof exports != 'undefined' && exports || this;
  out$.getFeedWordList = getFeedWordList = function(){
    return ['cat', 'dog', 'white', 'black', 'blue', 'red', 'bee', 'bird', 'lion', 'tiger', 'fish', 'city', 'house', 'roof', 'tree', 'river', 'apple', 'banana', 'cherry', 'orange', 'pear'];
  };
  out$.getFeedReadingList = getFeedReadingList = function(){
    return [['Why do elephants never forget?', 'Because nobody ever tells them anything!'], ['What do you get when you cross a parrot with a centipede?', 'A walkie talkie!'], ['What is the strongest animal?', 'A snail. He carries his house on his back!'], ['What has six eyes but cannot see?', 'Three blind mice!']];
  };
  out$.getFillBlankSentencesWithCategories = getFillBlankSentencesWithCategories = function(){
    return [['My favorite color is ________.', 'color'], ['My favorite animal is the ________.', 'animal'], ['My favorite fruit is the ________.', 'fruit']];
  };
  out$.getWordCategories = getWordCategories = function(){
    return {
      'color': ['red', 'blue', 'black', 'white'],
      'animal': ['cat', 'dog', 'bee', 'bird', 'lion', 'tiger', 'fish'],
      'fruit': ['apple', 'banana', 'cherry', 'orange', 'pear']
    };
  };
  out$.getFeedVideoLists = getFeedVideoLists = function(){
    return {
      lettervideo: ['y8pZ3F8KB_Y', 'F7WyPqms5x0', 'LnDxp5QNxmA', 'qdJwtaaTfb4', 'PMDpfPky054', 'CaywS_FK4wE', 'O96r1dZ4Nqg', 'ndf_-FJsPVk', 'yZbNMjwgEN8', 'GkcqRmdwKlE', 'DHRQXGTSvw0', 'YASqLUId4n8', 'xUOc-UwTVBA', 'LYyK7KurvMs', 'rpvtKnqu7-4', '3724uXedg0A', '-k4oiVaekT0', 'zQ7vvPa4pAk', 'McACiO5dwGM', '4PhbUhrI4KE', 'qmWTMNhtY9Q', 'NkniyCUWeF4', '8ovG9ptOjBw', 'RhA10WVTmHw', 'RJH2oMKPeaw', 'f-iL7k5jhCI'],
      numbervideo: ['pbRU3lsGS0M', 'IiwqgDfJyXQ', 'VW2MREqE-_I', 'eyi0179wpE0', 'dpMP78dU5gQ', 'aKZlJ-tZo1Y', 'sXhM7AfctNU', 'X5A9PKY2FYk', 'upx7UwL4Pws', 'whHJ-WTEu_4']
    };
  };
  out$.getPosterLists = getPosterLists = function(){
    return {
      'classa': ['tablet'],
      'classb': ['tablet', 'teacherb'],
      'classc': ['tablet', 'teacherc'],
      'classtest': ['tablet', 'teacherb'],
      'other': ['tablet']
    };
  };
  all_feed_items_cache = null;
  out$.getAllFeedItems = getAllFeedItems = function(){
    var wordlist, readinglist, videolists, fillblanklist, wordcategories, bars, res$, i$, ref$, len$, levelnum, dots, data, typeletter, word, typeword, balance, number, addition, ref1$, addval, sumval, subtraction, subval, diffval, admin, example, iframe, lettervideo, videoid, numbervideo, readaloud, sentences, fillblank, sentence, category, fillblanksocial;
    if (all_feed_items_cache != null) {
      return all_feed_items_cache;
    }
    wordlist = getFeedWordList();
    readinglist = getFeedReadingList();
    videolists = getFeedVideoLists();
    fillblanklist = getFillBlankSentencesWithCategories();
    wordcategories = getWordCategories();
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [0, 1, 2]).length; i$ < len$; ++i$) {
      levelnum = ref$[i$];
      res$.push({
        itemtype: 'bars',
        data: {
          level: levelnum
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    bars = res$;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [
      {
        numdots: 4,
        targetformula: '1x2=_'
      }, {
        numdots: 4,
        targetformula: '2x1=_'
      }, {
        numdots: 4,
        targetformula: '3x1=_'
      }, {
        numdots: 4,
        targetformula: '3x2=_'
      }, {
        numdots: 4,
        targetformula: '3x4=_'
      }, {
        numdots: 6,
        targetformula: '_x6=18'
      }, {
        numdots: 5,
        targetformula: '3x_=15'
      }, {
        numdots: 8,
        targetformula: '_x_=24'
      }
    ]).length; i$ < len$; ++i$) {
      data = ref$[i$];
      res$.push({
        itemtype: 'dots',
        data: data,
        social: {
          poster: 'tablet'
        }
      });
    }
    dots = res$;
    res$ = [];
    for (i$ = 0, len$ = wordlist.length; i$ < len$; ++i$) {
      word = wordlist[i$];
      res$.push({
        itemtype: 'typeletter',
        data: {
          word: word
        },
        social: {
          poster: 'tablet',
          finishedby: []
        }
      });
    }
    typeletter = res$;
    res$ = [];
    for (i$ = 0, len$ = wordlist.length; i$ < len$; ++i$) {
      word = wordlist[i$];
      res$.push({
        itemtype: 'typeword',
        data: {
          word: word
        },
        social: {
          poster: 'tablet',
          finishedby: []
        }
      });
    }
    typeword = res$;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [1, 2, 3, 5, 10, 14, 57, 129, 206, 329, 453, 511, 933]).length; i$ < len$; ++i$) {
      number = ref$[i$];
      res$.push({
        itemtype: 'balance',
        data: {
          number: number
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    balance = res$;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [[1, 2], [1, 3], [1, 5], [2, 4], [2, 6], [2, 10], [3, 6], [3, 9], [4, 7], [4, 8], [5, 6], [6, 9], [5, 10]]).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], addval = ref1$[0], sumval = ref1$[1];
      res$.push({
        itemtype: 'addition',
        data: {
          sum: sumval,
          add: addval
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    addition = res$;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [[2, 1], [3, 1], [5, 1], [4, 2], [6, 2], [10, 4], [6, 3], [9, 3], [9, 4], [10, 5], [10, 3]]).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], subval = ref1$[0], diffval = ref1$[1];
      res$.push({
        itemtype: 'subtraction',
        data: {
          diff: diffval,
          sub: subval
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    subtraction = res$;
    admin = [{
      itemtype: 'admin',
      social: {
        poster: 'tablet'
      }
    }];
    example = [{
      itemtype: 'example',
      data: {
        foo: 'somefooval',
        bar: 'somebarval'
      },
      social: {
        poster: 'tablet',
        finishedby: []
      }
    }];
    iframe = [{
      itemtype: 'iframe',
      data: {
        activitypage: 'iframe-activity-example.html',
        thumbnailpage: 'iframe-thumbnail-example.html',
        params: {
          foo: 'somefooval',
          bar: 'somebarval'
        }
      },
      social: {
        poster: 'tablet',
        finishedby: []
      }
    }];
    res$ = [];
    for (i$ = 0, len$ = (ref$ = videolists.lettervideo).length; i$ < len$; ++i$) {
      videoid = ref$[i$];
      res$.push({
        itemtype: 'video',
        data: {
          itemcategory: 'lettervideo',
          videoid: videoid
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    lettervideo = res$;
    res$ = [];
    for (i$ = 0, len$ = (ref$ = videolists.numbervideo).length; i$ < len$; ++i$) {
      videoid = ref$[i$];
      res$.push({
        itemtype: 'video',
        data: {
          itemcategory: 'numbervideo',
          videoid: videoid
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    numbervideo = res$;
    res$ = [];
    for (i$ = 0, len$ = readinglist.length; i$ < len$; ++i$) {
      sentences = readinglist[i$];
      res$.push({
        itemtype: 'readaloud',
        data: {
          sentences: sentences
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    readaloud = res$;
    res$ = [];
    for (i$ = 0, len$ = fillblanklist.length; i$ < len$; ++i$) {
      ref$ = fillblanklist[i$], sentence = ref$[0], category = ref$[1];
      res$.push({
        itemtype: 'fillblank',
        data: {
          sentence: sentence,
          wordoptions: wordcategories[category]
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    fillblank = res$;
    res$ = [];
    for (i$ = 0, len$ = fillblanklist.length; i$ < len$; ++i$) {
      ref$ = fillblanklist[i$], sentence = ref$[0], category = ref$[1];
      res$.push({
        itemtype: 'fillblanksocial',
        data: {
          sentence: sentence,
          wordoptions: wordcategories[category],
          firstentered: wordcategories[category][0]
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    fillblanksocial = res$;
    all_feed_items_cache = {
      dots: dots,
      typeword: typeword,
      typeletter: typeletter,
      readaloud: readaloud,
      balance: balance,
      addition: addition,
      subtraction: subtraction,
      fillblank: fillblank,
      fillblanksocial: fillblanksocial
    };
    return all_feed_items_cache;
  };
  feed_items_cache = null;
  out$.chooseRandomPoster = chooseRandomPoster = function(classtype){
    var classPosterLists, classPosters, randomPoster;
    if (classtype === 'tablet') {
      return classtype;
    }
    classPosterLists = getPosterLists();
    classPosters = [];
    if (classPosterLists[classtype] === undefined) {
      classPosters = classPosterLists['other'];
    } else {
      classPosters = classPosterLists[classtype];
    }
    randomPoster = classPosters[Math.floor(Math.random() * classPosters.length)];
    return randomPoster;
  };
  out$.barsTasks = barsTasks = function(classtype){
    var randomPoster, bars, res$, i$, ref$, len$, levelnum;
    randomPoster = chooseRandomPoster(classtype);
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [0, 1, 2]).length; i$ < len$; ++i$) {
      levelnum = ref$[i$];
      res$.push({
        itemtype: 'bars',
        data: {
          level: levelnum
        },
        social: {
          poster: randomPoster
        }
      });
    }
    bars = res$;
    return bars;
  };
  out$.dotsTasks = dotsTasks = function(classtype){
    var randomPoster, dots, res$, i$, ref$, len$, data;
    randomPoster = chooseRandomPoster(classtype);
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [
      {
        numdots: 4,
        targetformula: '1x2=_'
      }, {
        numdots: 4,
        targetformula: '2x1=_'
      }, {
        numdots: 4,
        targetformula: '3x1=_'
      }, {
        numdots: 4,
        targetformula: '3x2=_'
      }, {
        numdots: 4,
        targetformula: '3x4=_'
      }, {
        numdots: 6,
        targetformula: '_x6=18'
      }, {
        numdots: 5,
        targetformula: '3x_=15'
      }, {
        numdots: 8,
        targetformula: '_x_=24'
      }
    ]).length; i$ < len$; ++i$) {
      data = ref$[i$];
      res$.push({
        itemtype: 'dots',
        data: data,
        social: {
          poster: randomPoster
        }
      });
    }
    dots = res$;
    return dots;
  };
  out$.typeletterTasks = typeletterTasks = function(classtype){
    var randomPoster, wordlist, typeletter, res$, i$, len$, word;
    randomPoster = chooseRandomPoster(classtype);
    wordlist = getFeedWordList();
    res$ = [];
    for (i$ = 0, len$ = wordlist.length; i$ < len$; ++i$) {
      word = wordlist[i$];
      res$.push({
        itemtype: 'typeletter',
        data: {
          word: word
        },
        social: {
          poster: randomPoster,
          finishedby: []
        }
      });
    }
    typeletter = res$;
    return typeletter;
  };
  out$.typewordTasks = typewordTasks = function(classtype){
    var randomPoster, wordlist, typeword, res$, i$, len$, word;
    randomPoster = chooseRandomPoster(classtype);
    wordlist = getFeedWordList();
    res$ = [];
    for (i$ = 0, len$ = wordlist.length; i$ < len$; ++i$) {
      word = wordlist[i$];
      res$.push({
        itemtype: 'typeword',
        data: {
          word: word
        },
        social: {
          poster: randomPoster,
          finishedby: []
        }
      });
    }
    typeword = res$;
    return typeword;
  };
  out$.balanceTasks = balanceTasks = function(classtype){
    var randomPoster, balance, res$, i$, ref$, len$, number;
    randomPoster = chooseRandomPoster(classtype);
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [1, 3, 9, 20, 34, 100]).length; i$ < len$; ++i$) {
      number = ref$[i$];
      res$.push({
        itemtype: 'balance',
        data: {
          number: number
        },
        social: {
          poster: randomPoster
        }
      });
    }
    balance = res$;
    return balance;
  };
  out$.additionTasks = additionTasks = function(classtype){
    var randomPoster, addition, res$, i$, ref$, len$, ref1$, addval, sumval;
    randomPoster = chooseRandomPoster(classtype);
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [[1, 2], [1, 3], [2, 4]]).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], addval = ref1$[0], sumval = ref1$[1];
      res$.push({
        itemtype: 'addition',
        data: {
          sum: sumval,
          add: addval
        },
        social: {
          poster: randomPoster
        }
      });
    }
    addition = res$;
    return addition;
  };
  out$.subtractionTasks = subtractionTasks = function(classtype){
    var randomPoster, subtraction, res$, i$, ref$, len$, ref1$, subval, diffval;
    randomPoster = chooseRandomPoster(classtype);
    res$ = [];
    for (i$ = 0, len$ = (ref$ = [[2, 1], [3, 1], [4, 2]]).length; i$ < len$; ++i$) {
      ref1$ = ref$[i$], subval = ref1$[0], diffval = ref1$[1];
      res$.push({
        itemtype: 'subtraction',
        data: {
          diff: diffval,
          sub: subval
        },
        social: {
          poster: randomPoster
        }
      });
    }
    subtraction = res$;
    return subtraction;
  };
  out$.lettervideoTasks = lettervideoTasks = function(classtype){
    var randomPoster, videolists, lettervideo, res$, i$, ref$, len$, videoid;
    randomPoster = chooseRandomPoster(classtype);
    videolists = getFeedVideoLists();
    res$ = [];
    for (i$ = 0, len$ = (ref$ = videolists.lettervideo).length; i$ < len$; ++i$) {
      videoid = ref$[i$];
      res$.push({
        itemtype: 'video',
        data: {
          itemcategory: 'lettervideo',
          videoid: videoid
        },
        social: {
          poster: randomPoster
        }
      });
    }
    lettervideo = res$;
    return lettervideo;
  };
  out$.numbervideoTasks = numbervideoTasks = function(classtype){
    var randomPoster, videolists, numbervideo, res$, i$, ref$, len$, videoid;
    randomPoster = chooseRandomPoster(classtype);
    videolists = getFeedVideoLists();
    res$ = [];
    for (i$ = 0, len$ = (ref$ = videolists.numbervideo).length; i$ < len$; ++i$) {
      videoid = ref$[i$];
      res$.push({
        itemtype: 'video',
        data: {
          itemcategory: 'numbervideo',
          videoid: videoid
        },
        social: {
          poster: randomPoster
        }
      });
    }
    numbervideo = res$;
    return numbervideo;
  };
  out$.readaloudTasks = readaloudTasks = function(classtype){
    var randomPoster, readinglist, readaloud, res$, i$, len$, sentences;
    randomPoster = chooseRandomPoster(classtype);
    readinglist = getFeedReadingList();
    res$ = [];
    for (i$ = 0, len$ = readinglist.length; i$ < len$; ++i$) {
      sentences = readinglist[i$];
      res$.push({
        itemtype: 'readaloud',
        data: {
          sentences: sentences
        },
        social: {
          poster: randomPoster
        }
      });
    }
    readaloud = res$;
    return readaloud;
  };
  out$.fillblankTasks = fillblankTasks = function(classtype){
    var randomPoster, fillblanklist, wordcategories, fillblank, res$, i$, len$, ref$, sentence, category;
    randomPoster = chooseRandomPoster(classtype);
    fillblanklist = getFillBlankSentencesWithCategories();
    wordcategories = getWordCategories();
    res$ = [];
    for (i$ = 0, len$ = fillblanklist.length; i$ < len$; ++i$) {
      ref$ = fillblanklist[i$], sentence = ref$[0], category = ref$[1];
      res$.push({
        itemtype: 'fillblank',
        data: {
          sentence: sentence,
          wordoptions: wordcategories[category]
        },
        social: {
          poster: randomPoster
        }
      });
    }
    fillblank = res$;
    return fillblank;
  };
  out$.fillblanksocialTasks = fillblanksocialTasks = function(classtype){
    var randomPoster, fillblanklist, wordcategories, fillblanksocial, res$, i$, len$, ref$, sentence, category;
    randomPoster = chooseRandomPoster(classtype);
    fillblanklist = getFillBlankSentencesWithCategories();
    wordcategories = getWordCategories();
    res$ = [];
    for (i$ = 0, len$ = fillblanklist.length; i$ < len$; ++i$) {
      ref$ = fillblanklist[i$], sentence = ref$[0], category = ref$[1];
      res$.push({
        itemtype: 'fillblanksocial',
        data: {
          sentence: sentence,
          wordoptions: wordcategories[category],
          firstentered: wordcategories[category][0]
        },
        social: {
          poster: 'tablet'
        }
      });
    }
    fillblanksocial = res$;
    return fillblanksocial;
  };
  out$.getSampleFeedItems = getSampleFeedItems = function(){
    var wordlist, readinglist, videolists, fillblanklist, wordcategories, classA, classB, classC, tablet, bars_a, bars_b, bars_c, bars, dots_a, dots_b, dots_c, dots, typeletter_a, typeletter_b, typeletter_c, typeletter, typeword_a, typeword_b, typeword_c, typeword, balance_a, balance_b, balance_c, balance, addition_a, addition_b, addition_c, addition, subtraction_a, subtraction_b, subtraction_c, subtraction, lettervideo_a, lettervideo_b, lettervideo_c, lettervideo, numbervideo_a, numbervideo_b, numbervideo_c, numbervideo, readaloud_a, readaloud_b, readaloud_c, readaloud, fillblank_a, fillblank_b, fillblank_c, fillblank, fillblanksocial_a, fillblanksocial_b, fillblanksocial_c, fillblanksocial, admin, example, iframe, defaults, defaults_a, defaults_b, defaults_c;
    if (feed_items_cache != null) {
      return feed_items_cache;
    }
    wordlist = getFeedWordList();
    readinglist = getFeedReadingList();
    videolists = getFeedVideoLists();
    fillblanklist = getFillBlankSentencesWithCategories();
    wordcategories = getWordCategories();
    classA = 'classa';
    classB = 'classb';
    classC = 'classc';
    tablet = 'tablet';
    bars_a = barsTasks(classA);
    bars_b = barsTasks(classB);
    bars_c = barsTasks(classC);
    bars = barsTasks(tablet);
    dots_a = dotsTasks(classA);
    dots_b = dotsTasks(classB);
    dots_c = dotsTasks(classC);
    dots = dotsTasks(tablet);
    typeletter_a = typeletterTasks(classA);
    typeletter_b = typeletterTasks(classB);
    typeletter_c = typeletterTasks(classC);
    typeletter = typeletterTasks(tablet);
    typeword_a = typewordTasks(classA);
    typeword_b = typewordTasks(classB);
    typeword_c = typewordTasks(classC);
    typeword = typewordTasks(tablet);
    balance_a = balanceTasks(classA);
    balance_b = balanceTasks(classB);
    balance_c = balanceTasks(classC);
    balance = balanceTasks(tablet);
    addition_a = additionTasks(classA);
    addition_b = additionTasks(classB);
    addition_c = additionTasks(classC);
    addition = additionTasks(tablet);
    subtraction_a = subtractionTasks(classA);
    subtraction_b = subtractionTasks(classB);
    subtraction_c = subtractionTasks(classC);
    subtraction = subtractionTasks(tablet);
    lettervideo_a = lettervideoTasks(classA);
    lettervideo_b = lettervideoTasks(classB);
    lettervideo_c = lettervideoTasks(classC);
    lettervideo = lettervideoTasks(tablet);
    numbervideo_a = numbervideoTasks(classA);
    numbervideo_b = numbervideoTasks(classB);
    numbervideo_c = numbervideoTasks(classC);
    numbervideo = numbervideoTasks(tablet);
    readaloud_a = readaloudTasks(classA);
    readaloud_b = readaloudTasks(classB);
    readaloud_c = readaloudTasks(classC);
    readaloud = readaloudTasks(tablet);
    fillblank_a = fillblankTasks(classA);
    fillblank_b = fillblankTasks(classB);
    fillblank_c = fillblankTasks(classC);
    fillblank = fillblankTasks(tablet);
    fillblanksocial_a = fillblanksocialTasks(classA);
    fillblanksocial_b = fillblanksocialTasks(classB);
    fillblanksocial_c = fillblanksocialTasks(classC);
    fillblanksocial = fillblanksocialTasks(tablet);
    admin = [{
      itemtype: 'admin',
      social: {
        poster: 'tablet'
      }
    }];
    example = [{
      itemtype: 'example',
      data: {
        foo: 'somefooval',
        bar: 'somebarval'
      },
      social: {
        poster: 'tablet',
        finishedby: []
      }
    }];
    iframe = [{
      itemtype: 'iframe',
      data: {
        activitypage: 'iframe-activity-example.html',
        thumbnailpage: 'iframe-thumbnail-example.html',
        params: {
          foo: 'somefooval',
          bar: 'somebarval'
        }
      },
      social: {
        poster: 'tablet',
        finishedby: []
      }
    }];
    defaults = dots.slice(0, 1).concat(typeword.slice(0, 1), balance.slice(0, 1), addition.slice(0, 1), subtraction.slice(0, 1), readaloud.slice(0, 1), fillblank.slice(0, 1));
    defaults_a = dots_a.slice(0, 1).concat(typeword_a.slice(0, 1), balance_a.slice(0, 1), addition_a.slice(0, 1), subtraction_a.slice(0, 1), readaloud_a.slice(0, 1), fillblank_a.slice(0, 1));
    defaults_b = dots_b.slice(0, 1).concat(typeword_b.slice(0, 1), balance_b.slice(0, 1), addition_b.slice(0, 1), subtraction_b.slice(0, 1), readaloud_b.slice(0, 1), fillblank_b.slice(0, 1));
    defaults_c = dots_c.slice(0, 1).concat(typeword_c.slice(0, 1), balance_c.slice(0, 1), addition_c.slice(0, 1), subtraction_c.slice(0, 1), readaloud_c.slice(0, 1), fillblank_c.slice(0, 1));
    feed_items_cache = {
      defaults: defaults,
      defaults_a: defaults_a,
      defaults_b: defaults_b,
      defaults_c: defaults_c,
      bars: bars,
      dots: dots,
      typeword: typeword,
      typeletter: typeletter,
      readaloud: readaloud,
      balance: balance,
      addition: addition,
      subtraction: subtraction,
      fillblank: fillblank,
      fillblanksocial: fillblanksocial,
      admin: admin,
      example: example,
      iframe: iframe
    };
    return feed_items_cache;
  };
}).call(this);
